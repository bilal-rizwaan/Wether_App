{"remainingRequest":"C:\\Users\\bilal\\Desktop\\weatherappvue-master\\weatherappvue-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\bilal\\Desktop\\weatherappvue-master\\weatherappvue-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\bilal\\Desktop\\weatherappvue-master\\weatherappvue-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\bilal\\Desktop\\weatherappvue-master\\weatherappvue-master\\src\\App.vue?vue&type=template&id=7ba5bd90&scoped=true&","dependencies":[{"path":"C:\\Users\\bilal\\Desktop\\weatherappvue-master\\weatherappvue-master\\src\\App.vue","mtime":1610697664556},{"path":"C:\\Users\\bilal\\Desktop\\weatherappvue-master\\weatherappvue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bilal\\Desktop\\weatherappvue-master\\weatherappvue-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\bilal\\Desktop\\weatherappvue-master\\weatherappvue-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\bilal\\Desktop\\weatherappvue-master\\weatherappvue-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}